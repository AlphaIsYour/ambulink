// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  nama      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  ambulans Ambulans[]
  reviews  Review[]

  @@map("users")
}

model Ambulans {
  id              Int               @id @default(autoincrement())
  nama            String            @db.VarChar(100)
  tipeInstansi    TipeInstansi      @map("tipe_instansi")
  jenisLayanan    JenisLayanan      @map("jenis_layanan")
  status          StatusHarga
  harga           Decimal?          @db.Decimal(10, 2)
  provinsi        String            @db.VarChar(50)
  kota            String            @db.VarChar(50)
  alamat          String            @db.Text
  latitude        Decimal           @db.Decimal(10, 8)
  longitude       Decimal           @db.Decimal(11, 8)
  kontak          String            @db.VarChar(20)
  whatsapp        String?           @db.VarChar(20)
  fasilitas       String?           @db.Text
  deskripsi       String?           @db.Text
  jamOperasional  String?           @map("jam_operasional") @db.VarChar(100)
  userId          Int?              @map("user_id")
  verified        Boolean           @default(false)
  active          Boolean           @default(true)
  rating          Decimal           @default(0.0) @db.Decimal(2, 1)
  jumlahRating    Int               @default(0) @map("jumlah_rating")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews Review[]

  @@map("ambulans")
}

model Review {
  id         Int      @id @default(autoincrement())
  ambulansId Int      @map("ambulans_id")
  userId     Int      @map("user_id")
  rating     Int      // Rating 1-5, constraint akan dihandle di application level
  komentar   String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  ambulans Ambulans @relation(fields: [ambulansId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

// Enums
enum Role {
  ADMIN @map("admin")
  USER  @map("user")

  @@map("role")
}

enum TipeInstansi {
  RUMAH_SAKIT @map("rumah_sakit")
  PMI         @map("pmi")
  KLINIK      @map("klinik")
  LAINNYA     @map("lainnya")

  @@map("tipe_instansi")
}

enum JenisLayanan {
  GAWAT_DARURAT     @map("gawat_darurat")
  NON_GAWAT_DARURAT @map("non_gawat_darurat")
  JENAZAH           @map("jenazah")

  @@map("jenis_layanan")
}

enum StatusHarga {
  GRATIS   @map("gratis")
  BERBAYAR @map("berbayar")

  @@map("status")
}